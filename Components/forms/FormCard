import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { motion } from "framer-motion";
import { format } from "date-fns";
import { ptBR } from "date-fns/locale";
import { ExternalLink, Users, Eye, AlertCircle, Settings } from "lucide-react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";

export default function FormCard({ form, index, onUpdate }) {
  const hasLimits = form.questions?.some(q => 
    q.options?.some(opt => opt.limit > 0)
  );

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: index * 0.1 }}
      whileHover={{ y: -4 }}
    >
      <Card className="bg-white shadow-sm border-slate-200 hover:shadow-lg transition-all duration-300 h-full">
        <CardContent className="p-6">
          <div className="flex items-start justify-between mb-4">
            <h3 className="font-bold text-slate-900 text-lg leading-tight">
              {form.title}
            </h3>
            <div className="flex gap-1 ml-2">
              <Link to={createPageUrl(`ViewForm?id=${form.id}`)}>
                <Button variant="ghost" size="sm" className="hover:bg-slate-100">
                  <Eye className="w-4 h-4" />
                </Button>
              </Link>
            </div>
          </div>

          {form.description && (
            <p className="text-slate-600 text-sm mb-4 line-clamp-2">
              {form.description}
            </p>
          )}

          <div className="space-y-3 mb-4">
            <div className="flex items-center gap-2">
              <Badge variant={form.is_active ? "default" : "secondary"}>
                {form.is_active ? "Ativo" : "Inativo"}
              </Badge>
              
              <Badge variant="outline" className="text-slate-600">
                <Users className="w-3 h-3 mr-1" />
                {form.total_responses || 0} respostas
              </Badge>

              {hasLimits && (
                <Badge variant="outline" className="text-orange-600 border-orange-200">
                  <AlertCircle className="w-3 h-3 mr-1" />
                  Limites
                </Badge>
              )}
            </div>
            
            <p className="text-xs text-slate-500">
              Criado em {format(new Date(form.created_date), "dd 'de' MMM, yyyy", { locale: ptBR })}
            </p>
          </div>

          <div className="flex gap-2 pt-4 border-t border-slate-100">
            <Link to={createPageUrl(`ViewForm?id=${form.id}`)} className="flex-1">
              <Button variant="outline" size="sm" className="w-full">
                <ExternalLink className="w-4 h-4 mr-2" />
                Ver
              </Button>
            </Link>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
}
