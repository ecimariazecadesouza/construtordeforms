import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { format } from "date-fns";
import { ptBR } from "date-fns/locale";
import { ExternalLink, Users, AlertCircle } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";

export default function RecentForms({ forms, loading }) {
  if (loading) {
    return (
      <Card className="bg-white shadow-sm border-slate-200">
        <CardHeader>
          <CardTitle>Formul치rios Recentes</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {Array(3).fill(0).map((_, i) => (
            <div key={i} className="p-4 border border-slate-100 rounded-lg">
              <Skeleton className="h-5 w-48 mb-2" />
              <Skeleton className="h-4 w-32 mb-3" />
              <div className="flex gap-2">
                <Skeleton className="h-6 w-16" />
                <Skeleton className="h-6 w-20" />
              </div>
            </div>
          ))}
        </CardContent>
      </Card>
    );
  }

  const recentForms = forms.slice(0, 5);

  return (
    <Card className="bg-white shadow-sm border-slate-200">
      <CardHeader>
        <CardTitle className="text-slate-900">Formul치rios Recentes</CardTitle>
      </CardHeader>
      <CardContent>
        {recentForms.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-slate-500 mb-4">Nenhum formul치rio criado ainda</p>
            <Link to={createPageUrl("CreateForm")}>
              <Button className="bg-blue-600 hover:bg-blue-700">
                Criar Primeiro Formul치rio
              </Button>
            </Link>
          </div>
        ) : (
          <div className="space-y-4">
            {recentForms.map((form) => {
              const hasLimits = form.questions?.some(q => 
                q.options?.some(opt => opt.limit > 0)
              );
              
              return (
                <div key={form.id} className="p-4 border border-slate-100 rounded-lg hover:bg-slate-50 transition-colors">
                  <div className="flex items-start justify-between mb-2">
                    <h3 className="font-semibold text-slate-900 truncate">{form.title}</h3>
                    <Link to={createPageUrl(`ViewForm?id=${form.id}`)}>
                      <Button variant="ghost" size="sm">
                        <ExternalLink className="w-4 h-4" />
                      </Button>
                    </Link>
                  </div>
                  
                  <p className="text-sm text-slate-600 mb-3">
                    Criado em {format(new Date(form.created_date), "dd 'de' MMM, yyyy", { locale: ptBR })}
                  </p>
                  
                  <div className="flex items-center gap-2">
                    <Badge variant={form.is_active ? "default" : "secondary"}>
                      {form.is_active ? "Ativo" : "Inativo"}
                    </Badge>
                    <Badge variant="outline" className="text-slate-600">
                      <Users className="w-3 h-3 mr-1" />
                      {form.total_responses || 0} respostas
                    </Badge>
                    {hasLimits && (
                      <Badge variant="outline" className="text-orange-600 border-orange-200">
                        <AlertCircle className="w-3 h-3 mr-1" />
                        Com limites
                      </Badge>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </CardContent>
    </Card>
  );
}
